services:
  - type: web
    name: roleplay-chronicles
    env: python
    region: frankfurt
    python:
      version: 3.11.6
    buildCommand: |
      # Install dependencies
      pip install -r requirements.txt
      
      # Create migrations directory if it doesn't exist
      mkdir -p migrations/versions
      
      # Initialize migrations if needed
      if [ ! -f "migrations/alembic.ini" ]; then
        echo "Initializing database migrations..."
        flask db init
      fi
      
      # Generate new migration if models have changed
      flask db migrate -m "Initial migration"
      
      # Apply migrations
      flask db upgrade
    startCommand: gunicorn --worker-tmp-dir /dev/shm --workers 2 --threads 4 --worker-class gthread --timeout 120 "wsgi:app"
    envVars:
      # Python configuration
      - key: PYTHON_VERSION
        value: 3.11.6
      - key: PYTHONUNBUFFERED
        value: "true"
      - key: PYTHONHASHSEED
        value: random
      
      # Flask configuration
      - key: FLASK_APP
        value: wsgi.py
      - key: FLASK_ENV
        value: production
      - key: SECRET_KEY
        generateValue: true
      
      # Supabase configuration - set these in Render dashboard
      - key: SUPABASE_URL
        sync: false
      - key: SUPABASE_KEY
        sync: false
      - key: SUPABASE_DB_URL
        sync: false
      
      # Database configuration
      - key: DATABASE_URL
        sync: false
      - key: SQLALCHEMY_DATABASE_URI
        sync: false
      - key: SQLALCHEMY_TRACK_MODIFICATIONS
        value: "false"
      
      # SSL configuration
      - key: PGSSLMODE
        value: require
      - key: PGSSLROOTCERT
        value: /etc/ssl/certs/ca-certificates.crt
      
      # Gunicorn configuration
      - key: GUNICORN_CMD_ARGS
        value: "--worker-tmp-dir /dev/shm --workers 2 --threads 4 --worker-class gthread --timeout 120"
      
      # Connection pooling
      - key: SQLALCHEMY_POOL_SIZE
        value: "5"
      - key: SQLALCHEMY_MAX_OVERFLOW
        value: "10"
      - key: SQLALCHEMY_POOL_TIMEOUT
        value: "30"
      - key: SQLALCHEMY_POOL_RECYCLE
        value: "300"
